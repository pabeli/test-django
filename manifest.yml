---
apiVersion: v1
kind: Namespace
metadata:
  name: tpi-dev
---
# Database definitions
---
# Postgres
---
## Postgres ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: tpi-dev
  labels:
    app: postgres
data:
  SQL_ENGINE: django.db.backends.postgresql_psycopg2
  SQL_HOST: postgres
  SQL_PORT: "5432"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: tpi-dev
  labels:
    app: postgres
type: Opaque
data:
  POSTGRES_PASSWORD: dHBpLWRldg== # tpi-dev
  POSTGRES_DB: dHBp # tpi
  POSTGRES_USER: dHBpLWRldi11c2Vy # tpi-dev-user
---
## Postgres Persistent Volume
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  namespace: tpi-dev
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /home/devops/tpi/dev/postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  namespace: tpi-dev
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Postgres Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: tpi-dev
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.4
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-persistent-storage
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
## Postgres service
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: tpi-dev
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    app: postgres
---
#  kubectl exec -n tpi-dev --stdin --tty postgres-7b7f8658c9-287bn  -- /bin/bash
---
# APP Definitions
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: todoapp-deployment
  name: todoapp-deployment
  namespace: tpi-dev
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: todoapp-deployment
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: todoapp-deployment
    spec:
      containers:
        - image: patriciocostilla/todoapp:test
          imagePullPolicy: Always
          name: todoapp-deployment
          ports:
            - containerPort: 8000
              protocol: TCP
          env:
            - name: SQL_ENGINE
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: SQL_ENGINE
            - name: SQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: SQL_HOST
            - name: SQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: SQL_PORT
            - name: SQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            - name: SQL_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: todoapp-service
  namespace: tpi-dev
spec:
  selector:
    run: todoapp-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: todoapp-ingress
  namespace: tpi-dev
  # annotations:
  #  nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /tpi/dev
            pathType: Prefix
            backend:
              service:
                name: todoapp-service
                port:
                  number: 80
---
# kubectl exec -n tpi-dev --stdin --tty todoapp-deployment-59657f854b-78vcr  -- sh
