# Namespace for the project
apiVersion: v1
kind: Namespace
metadata:
  name: tpi-dev
---
# Database definitions
---
## Postgres
#---
## Postgres ConfigMap
#---
#apiVersion: v1
#kind: ConfigMap
#metadata: 
#  name: postgres-config
#  labels: 
#    app: postgres
#  data:
#    SQL_ENGINE: django.db.backends.postgresql_psycopg2
#    SQL_HOST: postgres-service
#    SQL_PORT: "3306"
#---
## Postgres Persistent Volume  
#---
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#  name: postgres-pv-volume
#  labels:
#    type: local
#    app: postgres
#spec:
#  storageClassName: manual
#  capacity:
#    storage: 5Gi
#  accessModes: 
#    - ReadWriteMany
#  hostPath:
#    path: /home/devops/tpi/dev/mysql
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: postgres-pv-claim
#  labels:
#    app: postgres
#  spec:
#    storageClassName: manual
#    accessModes: 
#      - ReadWriteMany
#    resources:
#      requests:
#        storage: 5Gi
#---
## Postgres Deployment
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: postgres-deployment
#spec: 
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: postgres-deployment
#    spec:
#      containers:
#        - name: postgres
#          image: postgres:10.4
#          imagePullPolicy: "IfNotPresent"
#          ports:
#            - containerPort: 5432
#          envFrom:
#            - configMapKeyRef:
#                name: postgres-config
#          volumeMounts:
#            -  mountPath: /var/lib/mysql
#               name: postgres-persistent-storage
#          volumes:
#            - name: postgres-persistent-storage
#              persistentVolumeClaim: 
#                claimName: postgres-pv-claim
#---
## Postgres service
#---
#apiVersion: v1
#kind: Service
#metadata: 
#  name: postgres
#  labels:
#    app: postgres
#  spec: 
#    type: NodePort
#    ports:
#      - port: 5432
#    selector:
#      app: postgres
---
# MySQL
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: tpi-dev
spec:
  selector:
    matchLabels:
      app: mysql-deployment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-deployment
    spec:
      containers:
        - image: mysql:8
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_PASSWORD
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          hostPath:
            path: /home/devops/tpi/dev/mysql
            type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: tpi-dev
spec:
  ports:
    - port: 3306
  selector:
    app: mysql-deployment
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
  namespace: tpi-dev
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: dHBpLWRldg== # tpi-dev
  MYSQL_DATABASE: dHBp # tpi
  MYSQL_USER: dHBpLWRldi11c2Vy # tpi-dev-user
  MYSQL_PASSWORD: dHBpLWRldg== # tpi-dev
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
  namespace: tpi-dev
data:
  SQL_ENGINE: django.db.backends.mysql
  SQL_HOST: mysql-service
  SQL_PORT: "3306"
---
# kubectl run -n tpi-dev -it --rm --image=mysql:8 --restart=Never mysql-client -- mysql -hmysql-service -utpi-dev-user -ptpi-dev
---
# APP Definitions
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: todoapp-deployment
  name: todoapp-deployment
  namespace: tpi-dev
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: todoapp-deployment
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: todoapp-deployment
    spec:
      containers:
        - image: patriciocostilla/todoapp:test
          imagePullPolicy: Always
          name: todoapp-deployment
          ports:
            - containerPort: 8000
              protocol: TCP
          env:
            - name: SQL_ENGINE
              valueFrom:
                configMapKeyRef:
                  name: mysql-configmap
                  key: SQL_ENGINE
            - name: SQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: mysql-configmap
                  key: SQL_HOST
            - name: SQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: mysql-configmap
                  key: SQL_PORT
            - name: SQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_DATABASE
            - name: SQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_USER
            - name: SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: todoapp-service
  namespace: tpi-dev
spec:
  selector:
    run: todoapp-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: todoapp-ingress
  namespace: tpi-dev
  # annotations:
  #  nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /tpi/dev
            pathType: Prefix
            backend:
              service:
                name: todoapp-service
                port:
                  number: 80
